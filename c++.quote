//2；引用
//2.1;引用的基本使用
//作用；给变量起别名
//语法；数据类型 &别名=原名
//#include<iostream>
//using namespace std;
//int main(){
//	//引用的基本语法
//	int a = 10;
//	cout << a << endl;
//	//创建引用
//	int &b = a;
//	cout << b << endl;
//	b = 20;
//	cout << a << endl;
//	cout << b << endl;
//	system("pause");
//	return 0;
//}

//2.2；引用注意事项
//引用必须初始化
//引用在初始化后，不可以改变
//#include<iostream>
//using namespace std;
//int main(){
//	int a = 10;
//	//引用必须初始化
//	int &b = a;
//	//int &b;//错误
//	//引用在初始化后，不可以改变
//	int c = 20;
//	//int &b = c;//会报错
//    b = c;//赋值操作，而不是更改引用
//	cout << "a=" <<a<< endl;
//	cout << "b=" <<b<< endl;
//	cout << "c=" <<c<< endl;
//	system("pause");
//	return 0;
//}

//2.3；引用做函数参数
//作用；函数传参时，可以利用引用技术让形参修饰实参
//优点；可以简化指针修饰实参
//#include<iostream>
//using namespace std;
//交换函数
//1;值传递
//void swap1(int a, int b){
//	int temp = a;
//	a = b;
//	b = temp;
//}

//2；地址传递
//void swap2(int *p, int *q){
//	int temp = *p;
//	*p = *q;
//	*q = temp;
//}

//3；引用传递
//void swap3(int &a, int &b){
//	int temp = a;
//	a = b;
//	b = temp;
//}
//int main(){
//	int a=10;
//	int b=20;
//	//swap1(a,b);
//	//swap2(&a,&b);
//	swap3(a, b);
//	cout << "a=" <<a<< endl;
//	cout << "b=" <<b<< endl;
//	system("pause");
//	return 0;
//}

//2.4；引用做函数返回值
//作用；引用是可以作为函数返回值存在的
//注意；不要返回局部变量引用
//用法；函数调用作为左值
//1；不要返回局部变量引用
//int& test1(){
//	int a = 10;//局部变量存放在栈区
//	return a;
//}

//#include<iostream>
//using namespace std;
////2；函数调用作为左值
//int& test2(){
//	static int a = 10;//静态变量存放在全局区
//	return a;
//}
//int main(){
//	//int &ref = test1();
//	//cout << ref << endl;//第一次结果正确是因为编译器做了保留
//	//cout << ref << endl;//第二次结果错误是因为内存已经释放
//	int &ref = test2();
//	cout << ref << endl;
//	cout << ref << endl;
//	test2() = 100;//如果函数的返回值是引用，这个函数调用可以做为左值
//	cout << ref << endl;
//	cout << ref << endl;
//	system("pause");
//	return 0;
//}

//2.5；引用的本质
//本质；引用的本质在c++内部是一个指针常量
#include<iostream>
using namespace std;
void func(int &ref){
	ref = 100;//ref是引用，转换为*ref=100;
}
int main(){
	int a = 10;   //自动转换为int * const ref=&a;指针常量是指针指向不可改，也说                                      明为什么引用不可更改
	int &ref = a;
	ref = 20;   //内部发现ref是引用，自动帮我们转换为：*ref=20;
	cout << "a=" << a << endl;
	cout << "ref=" << ref << endl;
	system("pause");
	return 0;
}

2.6常量引用
作用；常量引用主要用来修饰形参，防止误操作
在函数形参列表中，可以加const修饰形参，防止形参改变实参
#include<iostream>
using namespace std;
void showvalue(const int &val){
	//val = 1000;
	cout << "val=" << val << endl;
}
int main(){
	//常量引用
	//使用场景；用来修饰形参，防止误操作
	//int a = 10;
	//const int &ref = a;//引用必须引用一块合法的内存空间；例如int &ref = 10；是错误的，
	//ret = 20;//加入const之后变为只读，不可以修改
	//    但是const int &ref = 10是正确的，因为加上const之后，编译器将代码修改 int temp=10;(const) int &ref=temp;
	int a = 100;
	showvalue(a);
	system("pause");
	return 0;
}       
