//3; 函数提高
//3.1；函数默认参数
//在c++中，函数的型参列表中的形参是可以有默认值的
//语法；返回值类型 函数名（参数 = 默认值）{}
#include<iostream>
using namespace std;
//函数默认参数
//如果我们自己传入数据，就用自己的数据，如果没有，那么用默认值
int func(int a, int b=20, int c=30){
	return a + b + c;
}
//注意事项
//1;如果某个位置已经有了默认参数，那么从这个位置往后，从左到右必须有默认值
//int func(int a, int b = 20, int c = 30,int d){
//	return a + b + c;
//}

//2;如果函数声明有默认参数，函数实现就不能有默认参数
//声明和实现只能有一个有默认参数
int func2(int a, int b);
int func2(int a, int b){
	return a + b;
}
int main(){
	cout << func(10,30) << endl;
	system("pause");
	return 0;
}  
//3.2；函数占位参数
//c++中函数的形参列表里有占位参数，用来占位，调用函数是必须填补该位置
//语法；返回值类型 函数名 （数据类型）

#include<iostream>
using namespace std;
void func(int a, int =10){//占位参数可以有默认值
	cout << "this is func" << endl;
}
int main(){
	func(10,10);//此处必须传两个整形，如果占位参数加上默认值只传第一个整形就可以
	system("pause");
	return 0;
}

//#include<iostream>
//using namespace std;
//
//int main(){
//
//	system("pause");
//	return 0;
//}
//3.3；函数重载
//3.3.1；函数重载概述
//作用；函数名可以相同，提高复用性
//函数重载满足条件；
//1；同一作用域(下面举例函数都在全局作用域），2；函数名称相同，函数参数类型不同或者个数不同或者顺序不同
//注意；函数的返回值不可以作为函数重载的条件

#include<iostream>
using namespace std;
void func(){
	cout << "func的调用" << endl;
}
//void func(int){//错误
//	cout << "func的调用" << endl;
//}
//int func(){//错误
//	cout << "func的调用" << endl;
//}
void func(int a){
	cout << "func的调用" << endl;
}
void func(double a){
	cout << "func的调用" << endl;
}
void func(int a,double b){
	cout << "func的调用" << endl;
}
void func(double b,int a){
	cout << "func的调用" << endl;
}
int main(){
	func();
	func(10);
	func(3.14);
	func(10, 3.14);
	func(3.14, 10);
	system("pause");
	return 0;
}

//函数重载注意事项
//引用作为重载条件
//函数重载碰到函数默认参数
#include<iostream>
using namespace std;
void func(int &a){//int &a=10;不合法
	cout << "func(int &a)调用" << endl;
}
void func(const int &a){
	cout << "func(const int &a)调用" << endl;
}
void func2(int a){
	cout << "func2(int a)调用" << endl;
}
void func2(int a,int b=10){
	cout << "func2(int a,int b)调用" << endl;
}
int main(){
	/*int a = 10;
	func(a);*/
	func(10);
	func2(10);//当函数重载碰到默认参数，出现二义性，此处传两个参数则不会报错
	system("pause");
	return 0;
}
