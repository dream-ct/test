//4.6 继承
//4.6.1 继承的基本语法
//普通实现页面
//Java 页面
//class Java{
//public:
//	void header(){
//		cout << "首页、公开课、登录、注册...(公共头部)" << endl;
//	}
//	void footer(){
//		cout << "帮助中心、交流合作、站内地图...(公共底部)" << endl;
//	}
//	void left(){
//		cout << "Java、Python、c++...(公共分类列表)" << endl;
//	}
//	void content(){
//		cout << "Java学科视频" << endl;
//	}
//};
//
////Python 页面
//class Python{
//public:
//	void header(){
//		cout << "首页、公开课、登录、注册...(公共头部)" << endl;
//	}
//	void footer(){
//		cout << "帮助中心、交流合作、站内地图...(公共底部)" << endl;
//	}
//	void left(){
//		cout << "Java、Python、c++...(公共分类列表)" << endl;
//	}
//	void content(){
//		cout << "Python学科视频" << endl;
//	}
//};
//void test01(){
//	cout << "Java下载视频页面如下：" << endl;
//	Java ja;
//	ja.header();
//	ja.footer();
//	ja.left();
//	ja.content();
//
//	cout << "--------------------------" << endl;
//	
//	cout << "Python下载视频页面如下：" << endl;
//	Python py;
//	py.header();
//	py.footer();
//	py.left();
//	py.content(); 
//
//}
//int main(){
//	test01();
//	return 0;
//}

//继承实现页面

//公共页面类
class BasePage{
public:
		void header(){
			cout << "首页、公开课、登录、注册...(公共头部)" << endl;
		}
		void footer(){
			cout << "帮助中心、交流合作、站内地图...(公共底部)" << endl;
		}
		void left(){
			cout << "Java、Python、c++...(公共分类列表)" << endl;
		}
};
//继承好处：减少重复代码
//语法：class 子类
//Java页面 ：继承方式 父类
//子类 也成为派生类 父类 也称为基类
class Java :public BasePage{
public:
	void content(){
				cout << "Java学科视频" << endl;
	}
};
//Python页面
class Python :public BasePage{
public:
	void content(){
		cout << "Python学科视频" << endl;
	}
};
void test01(){
	cout << "Java下载视频页面如下：" << endl;
	Java ja;
	ja.header();
	ja.footer();
	ja.left();
	ja.content();

	cout << "--------------------------" << endl;
	
	cout << "Python下载视频页面如下：" << endl;
	Python py;
	py.header();
	py.footer();
	py.left();
	py.content(); 

}
int main(){
	test01();
	return 0;
}

//4.6.2 继承方式
//继承方式一个有三种：公共继承、保护继承、私有继承
//继承方式
//公共继承
class Base1{
public:
	int A;
protected:
	int B;
private:
	int C;
};
class Son1 :public Base1{
public:
	void func(){
		A = 10;//父类中的公共权限成员到子类中依然是公共权限
		B = 10;//父类中的保护权限成员到子类中依然是保护权限
		//C = 10;//父类中私有权限成员子类访问不到
	}
};
//保护继承
class Base2{
public:
	int A;
protected:
	int B;
private:
	int C;
};
class Son2 :protected Base2{
public:
	void func(){
		A = 10;//父类中的公共权限成员到子类变为保护权限
		B = 10;//父类中的保护权限成员到子类中依然是保护权限
		//C = 10;//父类中私有权限成员子类访问不到
	}
};

void test01(){
	Son1 s1;
	s1.A = 100;
	//s1.B = 100;//到了Son1中B是保护权限，类外访问不到
}
void test02(){
	Son2 s2;
	//s2.A = 100;//到了Son2中A是保护权限，类外访问不到
	//s1.B = 100;//到了Son2中B是保护权限，类外访问不到
}
class Base3{
public:
	int A;
protected:
	int B;
private:
	int C;
};
class Son3 :private Base3{
public:
	void func(){
		A = 10;//父类中的公共权限成员到子类变为私有权限
		B = 10;//父类中的保护权限成员到子类中变为私有权限
		//C = 10;//父类中私有权限成员子类访问不到
	}
};
void test03(){
	//Son3 s3;
	//s2.A = 100;//到了Son3中A是私有权限，类外访问不到
	//s1.B = 100;//到了Son3中B是私有权限，类外访问不到
}
class GrandSon3 :public Son3{
public:
	void func(){
		//A = 1000;//到了Son3中A变为私有，即使是儿子也访问不到
		//B = 1000;//到了Son3中B变为私有，即使是儿子也访问不到
	}
};
int main(){
	test01();
	test02();
	test03();
	return 0;
}

//4.6.3 继承中的对象模型
class Base{
public:
	int A;
protected:
	int B;
private:
	int C;
};
class Son :public Base{
public:
	int D;
};
void test01(){
	//父类中所有的非静态成员属性都会被子类继承下去
	//父类中私有成员属性是被编译器给隐藏了，因此访问不到，但是确实被继承下去
	cout << "size of son=" << sizeof(Son) << endl;
}
int main(){
	test01();
	return 0;
}

//4.6.4 继承中构造和析构顺序
class Base{
public:
	Base(){
		cout << "Base构造函数！" << endl;
	}
	~Base(){
		cout << "Base析构函数！" << endl;
	}
};
class Son :public Base{
public:
	Son(){
		cout << "Son构造函数！" << endl;
	}
	~Son(){
		cout << "Son析构函数！" << endl;
	}
};
void test01(){
	//Base b;
	Son s;
	//继承中的构造和析构顺序如下：
	//先构造父类，再构造子类，析构的顺序与构造顺序相反
}
int main(){
	test01();
	return 0;
}
