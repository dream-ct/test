//4.6 继承
//4.6.1 继承的基本语法
//普通实现页面
//Java 页面
//class Java{
//public:
//	void header(){
//		cout << "首页、公开课、登录、注册...(公共头部)" << endl;
//	}
//	void footer(){
//		cout << "帮助中心、交流合作、站内地图...(公共底部)" << endl;
//	}
//	void left(){
//		cout << "Java、Python、c++...(公共分类列表)" << endl;
//	}
//	void content(){
//		cout << "Java学科视频" << endl;
//	}
//};
//
////Python 页面
//class Python{
//public:
//	void header(){
//		cout << "首页、公开课、登录、注册...(公共头部)" << endl;
//	}
//	void footer(){
//		cout << "帮助中心、交流合作、站内地图...(公共底部)" << endl;
//	}
//	void left(){
//		cout << "Java、Python、c++...(公共分类列表)" << endl;
//	}
//	void content(){
//		cout << "Python学科视频" << endl;
//	}
//};
//void test01(){
//	cout << "Java下载视频页面如下：" << endl;
//	Java ja;
//	ja.header();
//	ja.footer();
//	ja.left();
//	ja.content();
//
//	cout << "--------------------------" << endl;
//	
//	cout << "Python下载视频页面如下：" << endl;
//	Python py;
//	py.header();
//	py.footer();
//	py.left();
//	py.content(); 
//
//}
//int main(){
//	test01();
//	return 0;
//}

//继承实现页面

//公共页面类
class BasePage{
public:
		void header(){
			cout << "首页、公开课、登录、注册...(公共头部)" << endl;
		}
		void footer(){
			cout << "帮助中心、交流合作、站内地图...(公共底部)" << endl;
		}
		void left(){
			cout << "Java、Python、c++...(公共分类列表)" << endl;
		}
};
//继承好处：减少重复代码
//语法：class 子类
//Java页面 ：继承方式 父类
//子类 也成为派生类 父类 也称为基类
class Java :public BasePage{
public:
	void content(){
				cout << "Java学科视频" << endl;
	}
};
//Python页面
class Python :public BasePage{
public:
	void content(){
		cout << "Python学科视频" << endl;
	}
};
void test01(){
	cout << "Java下载视频页面如下：" << endl;
	Java ja;
	ja.header();
	ja.footer();
	ja.left();
	ja.content();

	cout << "--------------------------" << endl;
	
	cout << "Python下载视频页面如下：" << endl;
	Python py;
	py.header();
	py.footer();
	py.left();
	py.content(); 

}
int main(){
	test01();
	return 0;
}

//4.6.2 继承方式
//继承方式一个有三种：公共继承、保护继承、私有继承
//继承方式
//公共继承
class Base1{
public:
	int A;
protected:
	int B;
private:
	int C;
};
class Son1 :public Base1{
public:
	void func(){
		A = 10;//父类中的公共权限成员到子类中依然是公共权限
		B = 10;//父类中的保护权限成员到子类中依然是保护权限
		//C = 10;//父类中私有权限成员子类访问不到
	}
};
//保护继承
class Base2{
public:
	int A;
protected:
	int B;
private:
	int C;
};
class Son2 :protected Base2{
public:
	void func(){
		A = 10;//父类中的公共权限成员到子类变为保护权限
		B = 10;//父类中的保护权限成员到子类中依然是保护权限
		//C = 10;//父类中私有权限成员子类访问不到
	}
};

void test01(){
	Son1 s1;
	s1.A = 100;
	//s1.B = 100;//到了Son1中B是保护权限，类外访问不到
}
void test02(){
	Son2 s2;
	//s2.A = 100;//到了Son2中A是保护权限，类外访问不到
	//s1.B = 100;//到了Son2中B是保护权限，类外访问不到
}
class Base3{
public:
	int A;
protected:
	int B;
private:
	int C;
};
class Son3 :private Base3{
public:
	void func(){
		A = 10;//父类中的公共权限成员到子类变为私有权限
		B = 10;//父类中的保护权限成员到子类中变为私有权限
		//C = 10;//父类中私有权限成员子类访问不到
	}
};
void test03(){
	//Son3 s3;
	//s2.A = 100;//到了Son3中A是私有权限，类外访问不到
	//s1.B = 100;//到了Son3中B是私有权限，类外访问不到
}
class GrandSon3 :public Son3{
public:
	void func(){
		//A = 1000;//到了Son3中A变为私有，即使是儿子也访问不到
		//B = 1000;//到了Son3中B变为私有，即使是儿子也访问不到
	}
};
int main(){
	test01();
	test02();
	test03();
	return 0;
}

//4.6.3 继承中的对象模型
class Base{
public:
	int A;
protected:
	int B;
private:
	int C;
};
class Son :public Base{
public:
	int D;
};
void test01(){
	//父类中所有的非静态成员属性都会被子类继承下去
	//父类中私有成员属性是被编译器给隐藏了，因此访问不到，但是确实被继承下去
	cout << "size of son=" << sizeof(Son) << endl;
}
int main(){
	test01();
	return 0;
}

//4.6.4 继承中构造和析构顺序
class Base{
public:
	Base(){
		cout << "Base构造函数！" << endl;
	}
	~Base(){
		cout << "Base析构函数！" << endl;
	}
};
class Son :public Base{
public:
	Son(){
		cout << "Son构造函数！" << endl;
	}
	~Son(){
		cout << "Son析构函数！" << endl;
	}
};
void test01(){
	//Base b;
	Son s;
	//继承中的构造和析构顺序如下：
	//先构造父类，再构造子类，析构的顺序与构造顺序相反
}
int main(){
	test01();
	return 0;
}

//4.6.5 继承中同名成员处理方式
class Base{
public:
	Base(){
		A = 100;
	}
	void func(){
		cout << "Base-func()调用" << endl;
	}
	void func(int a){
		cout << "Base-func(int a)调用" << endl;
	}
	int A;
};
class Son :public Base{
public:
	Son(){
		A = 200;
	}
	void func(){
		cout << "Base-func()调用" << endl;
	}
	
	int A;
};
//同名成员属性处理
void test01(){
	Son s;
	cout << "Son  下 A=" << s.A << endl;
	//如果通过子类对象访问到父类中同名成员，需要加作用域
	cout << "Base 下 A=" << s.Base::A << endl;
}
//同名成员函数处理
void test02(){
	Son s;
	s.func();//直接调用 调用的是子类中的同名成员
	//如何调用到父类中同名成员函数
	s.Base::func();
	//如果子类中出现和父类同名的成员函数，子类的同名成员会隐藏掉父类中所有的成员函数
	//如果想访问到父类中被隐藏的同名成员函数，需要加作用域
	s.Base::func(100);
}
int main(){
	//test01();
	test02();
	return 0;
}

//4.6.6 继承中同名静态成员处理方式
class Base{
public:

	static int A;

	static void func(){
		cout << "Base-static void func()" << endl;
	}
	static void func(int a){
		cout << "Base-static void func(int a)" << endl;
	}
};
int Base:: A=100;
class Son :public Base{
public:
	static int A;

	static void func(){
		cout << "Son-static void func()" << endl;
	}
};
int Son::A = 200;
//同名静态成员属性
void test01(){
	Son s;
	//1 通过对象访问
	cout << "通过对象访问" << endl;
	cout << "A=" << s.A << endl;
	cout << "A=" << s.Base::A << endl;

	//2 通过类名访问
	cout << "通过类名访问" << endl;
	cout << "A=" << Son::A << endl;
	//第一个::代表通过类名方式访问 第二个::代表访问父类作用域下
	cout << "A=" << Son::Base::A << endl;
}
void test02(){
	Son s;
	//1 通过对象访问
	cout << "通过对象访问" << endl;
	s.func();
	s.Base::func();

	//2 通过类名访问
	cout << "通过类名访问" << endl;
	Son::func();
	Son::Base::func();
	//子类出现和父类同名静态成员函数，也会隐藏掉父类所有同名成语函数，
	//如果想要访问，需要加作用域
	Son::Base::func(100);
}
int main(){
	//test01();
	test02();
	return 0;
}

// 4.6.7 多继承语法
class Base1{
public:
	Base1(){
		A = 100;
	}
	int A;
};
class Base2{
public:
	Base2(){
		A = 200;
	}
	int A;
};
//子类  需要继承Base1和Base2
// 语法 class 子类：继承方式 父类1，继承方式 父类2
class Son : public Base1, public Base2{
public:
	Son(){
		C = 300;
		D = 400;
	}
	int C;
	int D;
};
void test01(){
	Son s;
	cout << "size of Son " << sizeof(s) << endl;
	//当父类中出现同名成员，需要加作用域区分
	cout << "Base1::A=" << s.Base1::A << endl;
	cout << "Base2::A=" << s.Base2::A << endl;
}
int main(){
	test01();
	return 0;
}

// 4.6.8 菱形继承
// 动物类
class Animal{
public:
	int Age;
};
// 利用虚继承 解决菱形继承问题
// 继承前加上关键字virtual变为虚继承
// Animal类称为 虚基类
// 羊类
class Sheep :virtual public Animal{

};
//  驼类
class Tuo :virtual public Animal{

};
// 羊驼类
class SheepTuo : public Sheep, public Tuo{

};
void test01(){
	SheepTuo st;
	st.Sheep::Age = 18;
	st.Tuo::Age = 28;
	//当菱形继承，两个父类拥有相同数据，需要加以作用域区分
	cout << "st.Sheep::Age=" << st.Sheep::Age << endl;
	cout << "st.Tuo::Age=" << st.Tuo::Age << endl;
	cout << "st.Age=" << st.Age << endl;
	//这份数据我们知道 只有一份就可以，菱形继承导致数据有两份，资源浪费
}
int main(){
	test01();
	return 0;
}


