//c++核心编程
//1；内存分区模型；c++程序在执行时，将内存划分为4个区域
//代码区；放函数的二进制代码，由操作系统进行管理
//全局区；存放全局变量和静态变量以及字符，全局常量
//栈区；由编译器自动分配释放，存放函数的参数值，局部变量等
//堆区；由程序员分配和释放，程序结束时由操作系统回收
//1.1；程序运行前
//在程序编译后，生成了exe可执行程序，未执行该程序前分为两个区域
//代码区；存放CPU执行的机器指令，代码时共享的，共享的目的是对于频繁被执行的程序，只要在内存中有一份代码即可，代码区是可读的，使其只读的原因是防止程序意外地修改了它的指令
//全局区；全局变量和静态常量存放在此，全局区还包含了常量区字符串常量和其他全局常量也存放在此，该区域的数据在程序结束后由操作系统释放
//#include<iostream>
//using namespace std;
//int ga = 10;
//int gb = 10;
//const int gc = 10;
//const int gd = 10;
//int main(){
//	//全局区
//
//	//全局变量，静态变量，常量
//	cout << "全局变量ga的地址为：" << &ga << endl;
//	cout << "全局变量gb的地址为：" << &gb << endl;
//	static int ga = 10;
//	static int gb = 10;
//	cout << "静态变量ga的地址为：" << &ga << endl;
//	cout << "静态变量gb的地址为：" << &gb << endl;
//	//字符串常量
//	cout << "字符串常量的地址为；" << &"hello world" << endl;
//	//const修饰的变量
//	//const修饰全局的变量
//	cout << "全局常量gc的地址为；" << &gc << endl;
//	cout << "全局常量gd的地址为；" << &gd << endl;
//	
//	//const修饰局部的变量
//	const int c = 10;
//	const int d = 10;
//	cout << "局部常量c的地址为；" << &c << endl;
//	cout << "局部常量d的地址为；" << &d << endl;
//	//创建普通局部变量
//	int a = 10;
//	int b = 10;
//	cout << "局部变量a的地址为：" << &a << endl;
//	cout << "局部变量b的地址为：" << &b << endl;
//	
//	system("pause");
//	return 0;
//}

//1.2 程序运行后
//栈区；由编译器自动分配释放，存放函数的参数值，局部变量等
//注意事项；不要返回局部变量地址，栈区开辟的数据由编译器自动释放
//#include<iostream>
//using namespace std;
////栈区注意事项；不要返回局部变量地址
//int* func(int b){//形参数据也会放在栈区
//	int a = 10;
//	b = 20;
//	return &a;
//}
//int main(){
//	int* p = func(1);
//	cout << *p << endl;//第一次可以打印正确数字，是因为编译器做了保留
//	cout << *p << endl;//第二次这个数据就不再保留了
//	//栈区的数据由编译器管理开辟和释放
//	system("pause");
//	return 0;
//}

//堆区；由程序员分配和释放，程序结束时由操作系统回收
//在c++中主要利用new在堆区开辟内存
//#include<iostream>
//using namespace std;
//int* func(){
//	//利用new关键字 可以将数据开辟到堆区
//	//指针本质也是局部变量，放在栈上，指针保存的数据是放在堆区
//	int* p = new int(10);
//	return p;
//}
//int main(){
//	//在堆区开辟数据
//	int *p = func();
//	cout << *p << endl;
//	cout << *p << endl;
//	system("pause");
//	return 0;
//}

//1.3 new操作
//c++中利用new操作符在堆区开辟数据
//堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符delete
//语法；new 数据类型
//利用new创建的数据，会返回该数据对应的类型的指针
//#include<iostream>
//using namespace std;
////1;new的基本语法；
//int* func(){
//	//在堆区创建整形数据
//	//new返回是该数据类型的指针
//	int *p = new int(10);
//	return p;
//}

//2;在堆区利用开辟数组
//void test(){
//	//创建10个整形的数组，在堆区
//	int *p=new int[10];//10代表数组有十个元素
//	for (int i = 0; i < 10; i++){
//		p[i] = i + 100;
//	}
//	for (int i = 0; i < 10; i++){
//		cout << p[i] << endl;
//	}
//	//释放堆区数组
//	//释放数组的时候要加[];
//	delete[] p;
//}
//
//int main(){
	//int *p = func();
	//cout << *p << endl;//堆区的数据由程序员管理开辟，程序员释放，如果想释放堆区的数据，利用关键字delete
	//cout << *p << endl;
	//delete p;
	//cout << *p << endl;//内存已经被释放，在此访问就是非法操作，会报错
	/*test();
	system("pause");
	return 0;
}*/

