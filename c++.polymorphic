// 4.7 多态
// 4.7.1 多态的基本概念
//动物类
class Animal{
public:
	//虚函数
	virtual void speak(){
		cout << "动物在说话" << endl;
	}
};
// 猫类
class Cat :public Animal{
public:
	//重写 函数返回值类型 函数名 参数列表 完全相同
	void speak(){
		cout << "小猫在说话" << endl;
	}
};
// 狗类
class Dog :public Animal{
public:
	void speak(){
		cout << "小狗在说话" << endl;
	}
};
//执行说话的函数
//地址早绑定 在编译阶段确定函数地址
//如果想执行让猫说话，那么这个函数地址就不能提前绑定，需要在运行阶段进行绑定

// 动态多态满足条件
// 1、有继承关系
// 2、子类要重写父类中的虚函数

// 动态多态使用
// 父类的指针或引用执向子类对象
void doSpeak(Animal &animal){ //Animal & animal =cat;
	animal.speak();
}
void test01(){
	Cat cat;
	doSpeak(cat);
	Dog dog;
	doSpeak(dog);
}
void test02(){
	cout << "sise of Animal " << sizeof(Animal) << endl;
}
int main(){
	test01();
                test02();
	return 0;
}

// 4.7.2 多态案例一 计算器类
// 案例描述：分别利用普通写法和多态技术，设计两个操作数进行运算的计算器类
class Calculator{
public:
	int getResult(string oper){
		if (oper == "+")
			return Num1 + Num2;
		else if (oper == "-")
			return Num1 - Num2;
		else if (oper == "*")
			return Num1 * Num2;
		//如果想扩展新功能，需求修改源码
		//在真实开发中 提倡 开闭原则
		//开闭原则：对扩展进行开放，对修改进行关闭
	}
	int Num1;//操作数1
	int Num2;//操作数2
};
void test01(){
	//创建计算器对象
	Calculator c;
	c.Num1 = 10;
	c.Num2 = 10;
	cout << c.Num1 << "+" << c.Num2 << "=" << c.getResult("+") << endl;
	cout << c.Num1 << "-" << c.Num2 << "=" << c.getResult("-") << endl;
	cout << c.Num1 << "*" << c.Num2 << "=" << c.getResult("*") << endl;
}
//利用多态实现计算器
//实现计算器抽象类
//多态好处：
//1、组织结构清晰
//2、可读性强
//3、对于前期和后期扩展以及维护性高
//实现计算器抽象类
class AbstractCalculator{
public:
	virtual int getResult(){
		return 0;
	}
	int Num1;
	int Num2;
};
//加法计算器类
class AddCalculator :public AbstractCalculator{
public:
	 int getResult(){
		return Num1+Num2;
	}
};
//减法计算器类
class SubCalculator :public AbstractCalculator{
public:
	int getResult(){
		return Num1 - Num2;
	}
};
//乘法计算器类
class MulCalculator :public AbstractCalculator{
public:
	int getResult(){
		return Num1 * Num2;
	}
};
void test02(){
	//多态使用条件
	//父类指针或者引用指向子类对象
	AbstractCalculator* abc = new AddCalculator;
	abc->Num1 = 10;
	abc->Num2 = 10;
	cout << abc->Num1 << "+" << abc->Num2 << "=" << abc->getResult() << endl;
	//用完后记得销毁
	delete abc;
	//减法运算
	abc = new SubCalculator;
	abc->Num1 = 10;
	abc->Num2 = 10;
	cout << abc->Num1 << "-" << abc->Num2 << "=" << abc->getResult() << endl;
	delete abc;
}
int main(){
	//test01();
	test02();
	return 0;
}

//4.7.3 纯虚函数和抽象类
class Base{
public:
	//纯虚函数
	//只要有一个纯虚函数，这个类称为抽象类
	//抽象类特点
	// 1、无法实例化对象
	// 2、抽象类的子类 必须要重写父类中的纯虚函数，否则也属于抽象类
	virtual void func() = 0;
};
class Son :public Base{
public:
	virtual void func() {
		cout << "func()函数调用" << endl;
	};
};
void test01(){
	//Base b;//抽象类是无法实例化对象
	//new Base;//抽象类是无法实例化对象
	Son s;//子类必须重写父类中的纯虚函数，否则无法实例化对象
	Base *base = new Son;
	base->func();
}
int main(){
	test01();
	return 0;
}

// 4.7.4 多态案例二 制作饮品
//案例描述：制作饮品的大致流程为：煮水-冲泡-倒入杯中-加入辅料
//利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶
class AbstractDrinking{
public:
	//煮水
	virtual void Boil() = 0;
	//冲泡
	virtual void Brew() = 0;
	//倒入杯中
	virtual void PourInCup() = 0;
	//加入辅料
	virtual void PutSomething() = 0;
	//制作饮品
	void makeDrink(){
		Boil();
		Brew();
		PourInCup();
		PutSomething();
	}
};
//制作咖啡
class Coffee :public AbstractDrinking{
public:
	//煮水
	virtual void Boil(){
		cout << "煮农夫山泉" << endl;
	}
	//冲泡
	virtual void Brew() {
		cout << "冲泡咖啡" << endl;
	}
	//倒入杯中
	virtual void PourInCup() {
		cout << "倒入杯中" << endl;
	}
	//加入辅料
	virtual void PutSomething(){
		cout << "加入糖和牛奶" << endl;
	}
};
//制作茶叶
class Tea :public AbstractDrinking{
public:
	//煮水
	virtual void Boil(){
		cout << "煮矿泉水" << endl;
	}
	//冲泡
	virtual void Brew() {
		cout << "冲泡茶叶" << endl;
	}
	//倒入杯中
	virtual void PourInCup() {
		cout << "倒入杯中" << endl;
	}
	//加入辅料
	virtual void PutSomething(){
		cout << "加入柠檬" << endl;
	}
};
//制作函数
void doWork(AbstractDrinking *abs){
	abs->makeDrink();
	delete abs;
}
void test01(){
	//制作咖啡
	doWork(new Coffee);
	cout << "--------------" << endl;
	//制作茶类
	doWork(new Tea);
}
int main(){
	test01();
	return 0;
}

// 4.7.5 虚析构和纯虚构
class Animal{
public:
	Animal(){
		cout << "Animal构造函数调用" << endl;
	}
	//利用虚析构可以解决父类指针释放子类对象时不干净的问题
	/*virtual~Animal(){
		cout << "Animal析构函数调用" << endl;
	}*/
	//纯虚析构  需要声明也需要实现
	//有了纯虚析构之后，这个类也属于抽象类，无法实例化对象 
	virtual ~Animal() = 0;
	//纯虚函数
	virtual void speak() = 0;
};
Animal:: ~Animal(){
	cout << "Animal纯虚析构函数调用" << endl;
}
class Cat :public Animal{
public:
	Cat(string name){
		cout << "Cat构造函数调用" << endl;
		Name=new string(name);
	}

	virtual void speak(){
		cout << *Name<<"小猫在说话" << endl;
	}
	~Cat(){
		if (Name != NULL){
			cout << "Cat析构函数调用" << endl;
			delete Name;
			Name = NULL;
		}
	}
	string *Name;
};
void test01(){
	Animal *animal = new Cat("Tom");
	animal->speak();
	//父类指针在析构时候 不会调用子类中析构函数，导致如果有堆区属性，出现内存泄露
	delete animal;
}
int main(){
	test01();
}

// 多态案例三-电脑组装
// 案例描述：电脑主要组成部件为CPU(用于计算),显卡(用于显示),内存条(用于存储)
// 将每个零件封装处抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo
// 厂商创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口
// 测试时组装三台不同的电脑进行工作
// 抽象的CPU类
class CPU{
public:
	//抽象的计算函数
	virtual void calculate() = 0;
};
// 抽象显卡
class VideoCard{
public:
	//抽象的显示函数
	virtual void display() = 0;
};
// 抽象内存条
class Memory{
public:
	//抽象的存储函数
	virtual void storage() = 0;
};
// 电脑类
class Computer{
public:
	Computer(CPU* cpu, VideoCard *vc, Memory *mem){
		m_cpu = cpu;
		m_vc = vc;
		m_mem = mem;
	}
	// 提供工作的函数
	void work(){
		// 让零件工作起来，调用接口
		m_cpu->calculate();
		m_vc->display();
		m_mem->storage();
	}
	// 提供析构函数 释放三个电脑零件
	
	~Computer(){
		// 释放CPU零件
		if (m_cpu != NULL){
			delete m_cpu;
			m_cpu = NULL;
		}
		// 释放显卡零件
		if (m_vc != NULL){
			delete m_vc;
			m_vc = NULL;
	    }
		// 释放内存条零件
		if (m_mem != NULL){
			delete m_mem;
			m_mem = NULL;
		}
		
	}
private:
	CPU *m_cpu;//CPU的零件指针
	VideoCard *m_vc;//显卡零件指针
	Memory* m_mem;//内存条零件指针
};
// 具体厂商
// Intel厂商
class IntelCPU :public CPU{
public:
	virtual void calculate(){
		cout << "Intel的CPU开始计算了" << endl;
	}
};
class IntelMeomry :public Memory{
public:
	virtual void storage(){
		cout << "Intel的内存条开始存储了" << endl;
	}
};
class IntelVideoCard :public VideoCard{
public:
	virtual void display(){
		cout << "Intel的显卡开始显示了" << endl;
	}
};
// Lenovo厂商
class LenovoCPU :public CPU{
public:
	virtual void calculate(){
		cout << "Lenovo的CPU开始计算了" << endl;
	}
};
class LenovoMeomry :public Memory{
public:
	virtual void storage(){
		cout << "Lenovo的内存条开始存储了" << endl;
	}
};
class LenovoVideoCard :public VideoCard{
public:
	virtual void display(){
		cout << "Lenovo的显卡开始显示了" << endl;
	}
};
void test01(){
	//第一台电脑零件
	CPU *intelCpu = new IntelCPU;
	VideoCard *intelCard = new IntelVideoCard;
	Memory* intelMem = new IntelMeomry;
	//创建第一台电脑
	cout << "第一台电脑开始工作" << endl;
	Computer*computer1 = new Computer(intelCpu, intelCard, intelMem);
		computer1->work();
		delete computer1;
		cout << "第二台电脑开始工作" << endl;
	// 第二台电脑组装
		Computer*computer2 = new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMeomry);
		computer2->work();
		delete computer2;

}
int main(){
	test01();
	return 0;
}

