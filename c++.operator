//4.5 运算符重载
//概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型
//4.5.1 加号运算符重载
//作用：实现两个自定义数据类型相加的运算
class Person{
public:
	//1、成员函数重载+号
	/*Person operator+(Person &p){
		Person temp;
		temp.A = this->A + p.A;
		temp.B = this->B + p.B;
		return temp;
	}*/
	int A;
	int B;
};


//2、全局函数重载+号
Person operator+(Person &p1, Person &p2){
	Person temp;
	temp.A = p1.A + p2.A;
	temp.B = p1.B + p2.B;
	return temp;

}
//函数重载的版本
Person operator+(Person &p1, int num){
	Person temp;
	temp.A = p1.A + num;
	temp.B = p1.B + num;
	return temp;
}

void test01(){
	Person p1;
	p1.A = 10;
	p1.B = 10;
	Person p2;
	p2.A = 10;
	p2.B = 10;
	//成员函数重载本质调用
	//Person p3 = p1.operator+(p2);
	//全局函数重载本质调用
	Person p3 = operator+(p1, p2);
	//Person p3 = p1 + p2;
	//运算符重载也可以发生函数重载
	Person p4 = p1 + 10;
	cout << "p3.A=" << p3.A << endl;
	cout << "p3.B=" << p3.B << endl;

	cout << "p4.A=" << p3.A << endl;
	cout << "p4.B=" << p3.B << endl;
}
int main(){
	test01();
	system("pause");
	return 0;
}
总结1：对于内置的数据类型表达式的运算符是不可能改变的
总结2：不要滥用运算符重载

//4.5.2 左移运算符重载
//作用：可以输出自定义数据类型
class Person{
	friend ostream& operator<<(ostream &cout, Person& p);
public:
	Person(int a, int b){
		A = a;
		B = b;
	}
private:
	//利用成员函数重载 左移运算符 p.operator<<(cout) 简化版本 p<<cout
	//不会利用成员函数重载<<运算符，因为无法实现cout在左侧
	/*void operator<<(cout){

	}*/
	int A;
	int B;
};

//只能利用全局函数重载左移运算符
ostream& operator<<(ostream &cout, Person& p) {    // 本质 operator<< (cout,p) 简化 cout<<p
	cout << "A=" << p.A << " B=" << p.B << endl;  //ostream :标准输出流
	return cout;
}
void test01(){
	Person p(10,10);
	/*p.A = 10;*/
	/*p.B = 20;*/
	cout << p << endl;
}
int main(){
	test01();
	system("pause");
	return 0;
}

//4.5.3 递增运算符重载
//作用：通过重载递增运算符，实现自己的整型数据
class MyInteger{
public:
	friend ostream& operator<<(ostream& cout, MyInteger myint);
	MyInteger(){
		Num = 0;
	}

	////重载前置++运算符  返回引用是为了一直对一个数据进行递增操作
	//MyInteger &operator++(){
	//	//先进行++运算
	//	Num++;
	//	//再将自身做返回
	//	return *this;
	//}
	//重载后置++运算符
	//void operator++(int) int代表占位参数，可以用于区分前置和后置递增
	MyInteger operator++(int){
		// 先 记录当时结果
		MyInteger temp = *this;
		// 后 递增
		Num++;
		//最后将记录结果做返回
		return temp;
	}
private:
	int Num;
};
void test01(){
	MyInteger myint;
	cout << myint++ << endl;
	cout << myint << endl;
}

//void test02(){
//	MyInteger myint;
//	cout << ++(++myint) << endl;
//	cout << myint << endl;
//}

//重载左移运算符
ostream& operator<<(ostream& cout, MyInteger myint){
	cout << myint.Num;
	return cout;
}
int main(){
	test01();
	system("pause");
	return 0;
}

//4.5.4 赋值运算符重载
class Person{
public:
	Person(int age){
		Age = new int(age);
	}
	int *Age;

	~Person(){
		if (Age != NULL){
			delete Age;
			Age = NULL;
		}
	}

	//重载赋值 运算符
	Person& operator=(Person &p){
		//编译器提供的是浅拷贝
		//Age=p.Age;
		//应该先判断是否有属性在堆区，如果有先释放干净然后再深拷贝
		if (Age != NULL){
			delete Age;
			Age = NULL;
		}
		Age = new int(*p.Age);
		return *this;
	}
};
void test01(){
	Person p1(18);
	Person p2(20);
	Person p3(20);
	p3 = p2 = p1;
	p2 = p1;//赋值操作
	cout << "p1的年龄为：" << *p1.Age << endl;
	cout << "p2的年龄为：" << *p2.Age << endl;
	cout << "p3的年龄为：" << *p3.Age << endl;
}
int main(){
	test01();
	int a = 10;
	int b = 20;
	int c = 30;
	a = b = c;
	cout << "a=" << a << endl;
	cout << "b=" << b << endl;
	cout << "c=" << c << endl;
	system("pause");
	return 0;
}

//4.5.5 关系运算符重载
class Person{
public:
	Person(string name, int age){
		Name = name;
		Age = age;
	}

	//重载==号
	bool operator==(Person &p){
		if (this->Name == Name&&this->Age == Age){
			return true;
		}
		return true;
	}
	bool operator!=(Person &p){
		if (this->Name == Name&&this->Age == Age){
			return true;
		}
		return true;
	}
	string Name;
	int Age;
};
void test01(){
	Person p1("Tom", 18);
	Person p2("Tom", 8);
	if (p1 != p2){
		cout << "p1和p2不相等" << endl;
	}
	else{
		cout << "p1和p2是相等的" << endl;
	}
}
int main(){
	test01();
	
	return 0;
}

//4.5.6函数调用运算符重载
//函数调用运算符()也可以重载
//由于重载后是用的方式非常像函数的调用，因此称为仿函数
//仿函数没有固定写法，非常灵活

//打印输出类
class Myprint{
public:
	// 重载函数调用运算符
	void operator()(string test){
		cout << test << endl;
	}
};
void Myprint02(string test){
	cout << test << endl;
}
void test01(){
	Myprint myprint;
	myprint("hello world");//由于使用起来非常类似于函数调用，因此称为仿函数
	Myprint02("hello world");
}

//加法类
class Myadd{
public:
	int operator()(int num1,int num2){
		return num1 + num2;
	}
};
void test02(){
	Myadd myadd;
	int ret=myadd(100, 100);
	cout << ret << endl;
               //匿名函数对象
	cout << Myadd()(100, 100) << endl;
	
}
int main(){
	//test01();
	test02();
	return 0;
}
