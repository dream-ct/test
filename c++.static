//4.3 c++对象模型和this指针
//4.3.1 成员变量和成员函数分来存储
//在c++中，类内的成员变量和成员函数分开存储
//只有非静态成员变量才属于类的对象上
class Person{
	int A;                 //非静态成员变量 属于类的对象上
	static int B;          //静态成员变量 不属于类对象上
	void func(){}          //非静态成员函数 不属于类对象上
	static void func2(){}  //静态成员函数 不属于类对象上
};
int Person::B = 0;         //静态成员变量，类内声明，类外需要初始化 

void test01(){
	Person p;              //空对象占用内存空间为：1
	                       //c++编译器会给每个空对象也分配一个字节空间，是为了区分空对象占内存的位置
	                       //每个空对象也应该有一个独一无二的内存地址
	cout << "size of p" << sizeof(p) << endl;
}

void test02(){
	Person p;
	cout << "size of p" << sizeof(p) << endl;
}
int main(){
	//test01();
	test02();
	system("pause");
	return 0;
}

//4.3.2 this指针
//1、解决名称冲突
class Person{
public:
	Person(int age){
		//this指针指向 被调用的成员函数 所属的对象
		this->age = age;
	}

	Person& PersonAddAge(Person &p){
		this->age += p.age;
		//this指向p2的指针,而*this指向的就是p2这个对象的本体
		return *this;
	}
	int age;
};
void test01(){
	Person p1(18);
	cout << "p1的年龄为：" << p1.age << endl;
}
//2/返回对象本身用this
void test02(){
	Person p1(10);
	Person p2(10);

	//链式编程思想
	p2.PersonAddAge(p1).PersonAddAge(p1);
	cout << "p2的年龄为：" << p2.age << endl;
}

//4.3.3 空指针访问成员函数
//c++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针
//如果用到this指针，需要加以判断保证代码的健壮性
class Person{
public:
	void showClassName(){
		cout << "this is Person class" << endl;
	}
	//报错原因是因为传入的指针是为NULL
	void showPersonAge(){
		cout << "age=" << Age << endl;
	}
	int Age;
	////解决方法:
	//if (this == NULL){
	//	return;
	//}
};
void test01(){
	Person *p = NULL;

	p->showClassName();

	p->showPersonAge();
}
int main(){
	test01();
	
	system("pause");
}


//4.3.4 const修饰成员函数
//常函数：
//成员函数后加const后我们称为这个函数为常函数；常函数不可以修改成员属性；
//  成员属性声明是加关键字mutable后，在常函数中依然可以修改
//常对象：
//声明对象前加const称该对象为常对象；常对象只能调用常函数
class Person{
public:

	//this指针的本质  是指针常量 指针的指向是不可以修改的
	//const Person* const this;
	//在成员函数后面加const,修饰的是this指向，让指针指向的值也不可以修改
	void showPerson() const{
		//this->A=100;
		//this = NULL;//this指针不可以修改指针的指向
		this->B = 100;
	}
	int A;
	mutable int B;//特殊变量，即使在常函数中，也可以修改这个值，加上关键字mutable
	void func(){

	}
};

void test01(){
	Person p;
	p.showPerson();
}

//常对象：
void test02(){
	const Person p;//在对象前加const,变为常对象
	//p.A = 100;
	p.B = 100;//B是特殊值，在常对象下也可以修改

	//常对象只能调用常函数
	p.showPerson();
	//p.func();//常对象 不可以调用普通成员函数 ，因为普通成员函数可以修改属性
}
int main(){
	test01();
	
	system("pause");
	return 0;
}

//4.4 友元
//4.4.1全局函数做友元
//建筑物类
class Building{
	//goodGay全局函数是Building好朋友，可以访问Building中私有成员
	friend void goodGay(Building *building);
public:
	Building(){
		SittingRoom = "客厅";
		BedRoom = "卧室";
	}
public:
	string SittingRoom;//客厅

private:
	string BedRoom;
};
//全局函数
void goodGay(Building *building){
	cout << "好朋友全局函数 正在访问：" << building->SittingRoom << endl;
	cout << "好朋友全局函数 正在访问：" << building->BedRoom << endl;
}

void test01(){
	Building building;
	goodGay(&building);
}
int main(){
	test01();
	system("pause");
	return 0;
}

//4.4.2类做友元
class Building;
class GoodGay{
public:
	GoodGay();
	void visit();//参观函数 访问Building中的属性
	Building *building;
};
class Building{
	//goodGay全局函数是Building好朋友，可以访问Building中私有成员
	friend class GoodGay;
public:
	Building();
public:
	string SittingRoom;//客厅

private:
	string Bedroom;//卧室
};

//类外写成员函数
Building::Building(){
	SittingRoom = "客厅";
	Bedroom = "卧室";
}
GoodGay::GoodGay(){
	//创建建筑对象
	building = new Building;
}
void GoodGay::visit(){
	cout << "好朋友全局函数 正在访问：" << building->SittingRoom << endl;
	cout << "好朋友全局函数 正在访问：" << building->Bedroom << endl;
}
void test01(){
	GoodGay gg;
	gg.visit();
}
int main(){
	test01();
	system("pause");
	return 0;
}



class Building;
class GoodGay{
public:
	GoodGay();
	void visit();//让visit函数访问Building中私有成员
	void visit2();//让visit2函数不可以访问Building中私有成员
	Building *building;
};
class Building{
	//告诉编译器 GoodGay类下的visit成员函数作为本类的好朋友，可以访问Building中私有成员
	friend void GoodGay::visit();
public:
	Building();
public:
	string SittingRoom;//客厅

private:
	string Bedroom;//卧室
};
Building::Building(){
	SittingRoom = "客厅";
	Bedroom = "卧室";
}
GoodGay::GoodGay(){
	//创建建筑对象
	building = new Building;
}

void GoodGay::visit(){
	cout << "visit函数正在访问：" << building->SittingRoom << endl;
	cout << "visit函数正在访问：" << building->Bedroom << endl;
}
void GoodGay::visit2(){
	cout << "visit2函数正在访问：" << building->SittingRoom << endl;
	//cout << "visit2函数正在访问：" << building->Bedroom << endl;
}
void test01(){
	GoodGay gg;
	gg.visit();
	gg.visit2();
}
int main(){
	test01();
	
	system("pause");
	return 0;
}

